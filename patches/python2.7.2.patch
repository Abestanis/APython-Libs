--- Python-2.7.2.orig/Lib/distutils/sysconfig.py
+++ Python-2.7.2.new/Lib/distutils/sysconfig.py
@@ -148,7 +148,7 @@ def customize_compiler(compiler):
     Mainly needed on Unix, so we can plug in the information that
     varies across Unices and is stored in Python's Makefile.
     """
-    if compiler.compiler_type == "unix":
+    if compiler.compiler_type == "unix" and sys.platform != "android":
         (cc, cxx, opt, cflags, ccshared, ldshared, so_ext) = \
             get_config_vars('CC', 'CXX', 'OPT', 'CFLAGS',
                             'CCSHARED', 'LDSHARED', 'SO')
@@ -358,6 +358,18 @@ _config_vars = None
 def _init_posix():
     """Initialize the module as appropriate for POSIX systems."""
     g = {}
+    global _config_vars
+    if sys.platform == 'android':
+        g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
+        g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)
+
+        #g['INCLUDEPY'] = get_python_inc(plat_specific=0)
+
+        g['SO'] = '.so'
+        g['VERSION'] = get_python_version().replace(".", "")
+        #g['BINDIR'] = os.path.dirname(os.path.abspath(sys.executable))
+        _config_vars = g
+        return
     # load the installed Makefile:
     try:
         filename = get_makefile_filename()
@@ -430,7 +442,7 @@ def _init_posix():
             g['LDSHARED'] = ("%s -L%s/lib -lpython%s" %
                              (linkerscript, PREFIX, get_python_version()))
 
-    global _config_vars
+    #global _config_vars
     _config_vars = g
 
 
--- Python-2.7.2.orig/Lib/idlelib/PyShell.py
+++ Python-2.7.2.new/Lib/idlelib/PyShell.py
@@ -402,7 +402,7 @@ class ModifiedInterpreter(InteractiveInterpreter):
         self.spawn_subprocess()
         #time.sleep(20) # test to simulate GUI not accepting connection
         # Accept the connection from the Python execution server
-        self.rpcclt.listening_sock.settimeout(10)
+        self.rpcclt.listening_sock.settimeout(10 * 5000)
         try:
             self.rpcclt.accept()
         except socket.timeout, err:
--- Python-2.7.2.orig/Lib/idlelib/TreeWidget.py
+++ Python-2.7.2.new/Lib/idlelib/TreeWidget.py
@@ -21,16 +21,10 @@ import imp
 from idlelib import ZoomHeight
 from idlelib.configHandler import idleConf
 
-ICONDIR = "Icons"
+ICONDIR = idleConf.GetIconsDir()
 
-# Look for Icons subdirectory in the same directory as this module
-try:
-    _icondir = os.path.join(os.path.dirname(__file__), ICONDIR)
-except NameError:
-    _icondir = ICONDIR
-if os.path.isdir(_icondir):
-    ICONDIR = _icondir
-elif not os.path.isdir(ICONDIR):
+# Verify the icon dir
+if not os.path.isdir(ICONDIR):
     raise RuntimeError, "can't find icon directory (%r)" % (ICONDIR,)
 
 def listicons(icondir=ICONDIR):
--- Python-2.7.2.orig/Lib/idlelib/configHandler.py
+++ Python-2.7.2.new/Lib/idlelib/configHandler.py
@@ -22,6 +22,8 @@ import sys
 import string
 from idlelib import macosxSupport
 from ConfigParser import ConfigParser, NoOptionError, NoSectionError
+from tempfile import mkdtemp
+from shutil import rmtree, copytree
 
 class InvalidConfigType(Exception): pass
 class InvalidConfigSet(Exception): pass
@@ -66,7 +68,18 @@ class IdleConfParser(ConfigParser):
         """
         Load the configuration file from disk
         """
-        self.read(self.file)
+        if '.zip' in self.file:
+            try:
+                import zipfile
+                import io
+                zipPath, subPath = self.file.split('.zip')
+                with zipfile.ZipFile(zipPath + '.zip') as z:
+                    with io.TextIOWrapper(z.open(subPath.replace('\\', '/')[1:])) as fp:
+                        self.readfp(fp, filename = self.file)
+            except Exception:
+                pass
+        else:
+            self.read(self.file)
 
 class IdleUserConfParser(IdleConfParser):
     """
@@ -167,6 +180,7 @@ class IdleConf:
         self.defaultCfg={}
         self.userCfg={}
         self.cfg={}
+        self.iconDir = None
         self.CreateConfigHandlers()
         self.LoadCfgFiles()
         #self.LoadCfg()
@@ -201,9 +215,14 @@ class IdleConf:
         cfgDir = '.idlerc'
         userDir = os.path.expanduser('~')
         if userDir != '~': # expanduser() found user home dir
+            warn = None
             if not os.path.exists(userDir):
                 warn = ('\n Warning: os.path.expanduser("~") points to\n '+
                         userDir+',\n but the path does not exist.\n')
+            elif not os.access(userDir, os.W_OK | os.R_OK):
+                warn = ('\n Warning: os.path.expanduser("~") points to\n ' +
+                                        userDir + ',\n but the path is not writable.')
+            if warn:
                 try:
                     sys.stderr.write(warn)
                 except IOError:
@@ -682,6 +701,29 @@ class IdleConf:
         for key in self.userCfg.keys():
             self.userCfg[key].Save()
 
+    def GetIconsDir(self):
+        "Get the path to the directory, where all icons our icons are."
+        if self.iconDir == None:
+            self.iconDir = os.path.join(os.path.dirname(__file__), 'Icons')
+            if '.zip' in self.iconDir:
+                # tk does not support loading from a zip
+                cachePath = os.environ.get('XDG_CACHE_HOME')
+                iconDir = os.path.join(cachePath, 'idleIcons')
+                if not os.path.exists(iconDir):
+                    tempPath = mkdtemp(suffix = '-idleIcons')
+                    try:
+                        import zipfile
+                        zipPath, subPath = self.iconDir.split('.zip')
+                        subPath = subPath
+                        with zipfile.ZipFile(zipPath + '.zip', 'r') as pyZip:
+                            pyZip.extractall(path = tempPath, members = [img.filename for img in pyZip.filelist if subPath[1:] in img.filename])
+                        copytree(tempPath + subPath, iconDir)
+                    except Exception:
+                        pass
+                    rmtree(tempPath, ignore_errors = True)
+                self.iconDir = iconDir
+        return self.iconDir
+
 idleConf=IdleConf()
 
 ### module test
--- Python-2.7.2.orig/Lib/idlelib/textView.py
+++ Python-2.7.2.new/Lib/idlelib/textView.py
@@ -62,7 +62,15 @@ def view_text(parent, title, text):
 
 def view_file(parent, title, filename, encoding=None):
     try:
-        if encoding:
+        if '.zip' in filename:
+            import zipfile
+            zipPath, subPath = filename.split('.zip')
+            try:
+                with zipfile.ZipFile(zipPath + '.zip', 'r') as z:
+                    textFile = z.open(subPath.replace('\\', '/')[1:], 'r')
+            except BadZipfile:
+                raise IOError()
+        elif encoding:
             import codecs
             textFile = codecs.open(filename, 'r')
         else:
--- Python-2.7.2.orig/Lib/locale.py
+++ Python-2.7.2.new/Lib/locale.py
@@ -555,7 +555,11 @@ else:
         def getpreferredencoding(do_setlocale = True):
             """Return the charset that the user is likely using,
             by looking at environment variables."""
-            return getdefaultlocale()[1]
+            res = getdefaultlocale()[1]
+            if res is None:
+                # LANG not set, default conservatively to ASCII
+                res = 'ascii'
+            return res
     else:
         def getpreferredencoding(do_setlocale = True):
             """Return the charset that the user is likely using,
--- Python-2.7.2.orig/Lib/site.py
+++ Python-2.7.2.new/Lib/site.py
@@ -400,7 +400,17 @@ class _Printer(object):
                     fp.close()
                     break
                 except IOError:
-                    pass
+                    try:
+                        import zipfile
+                        zipPath, subPath = filename.split(".zip")
+                        zfp = zipfile.ZipFile(zipPath + ".zip", "r")
+                        fp = zfp.open(subPath.replace("\\", "/")[1:], "rU")
+                        data = fp.read()
+                        fp.close()
+                        zfp.close()
+                        break
+                    except Exception:
+                        pass
             if data:
                 break
         if not data:
--- Python-2.7.2.orig/Lib/subprocess.py
+++ Python-2.7.2.new/Lib/subprocess.py
@@ -1107,7 +1107,8 @@ class Popen(object):
                 args = list(args)
 
             if shell:
-                args = ["/bin/sh", "-c"] + args
+                shellPath = "/system/bin/sh" if sys.platform == "android" else "/bin/sh"
+                args = [shellPath, "-c"] + args
                 if executable:
                     args[0] = executable
 
--- Python-2.7.2.orig/Lib/sysconfig.py
+++ Python-2.7.2.new/Lib/sysconfig.py
@@ -276,26 +276,36 @@ def _get_makefile_filename():
 
 def _init_posix(vars):
     """Initialize the module as appropriate for POSIX systems."""
-    # load the installed Makefile:
-    makefile = _get_makefile_filename()
-    try:
-        _parse_makefile(makefile, vars)
-    except IOError, e:
-        msg = "invalid Python installation: unable to open %s" % makefile
-        if hasattr(e, "strerror"):
-            msg = msg + " (%s)" % e.strerror
-        raise IOError(msg)
+    if sys.platform == 'android':
+        vars['LIBDEST'] = get_path('stdlib')
+        vars['BINLIBDEST'] = get_path('platstdlib')
 
-    # load the installed pyconfig.h:
-    config_h = get_config_h_filename()
-    try:
-        with open(config_h) as f:
-            parse_config_h(f, vars)
-    except IOError, e:
-        msg = "invalid Python installation: unable to open %s" % config_h
-        if hasattr(e, "strerror"):
-            msg = msg + " (%s)" % e.strerror
-        raise IOError(msg)
+        #vars['INCLUDEPY'] = get_python_inc(plat_specific=0)
+
+        vars['SO'] = '.so'
+        vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT
+        vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))
+    else:
+        # load the installed Makefile:
+        makefile = _get_makefile_filename()
+        try:
+            _parse_makefile(makefile, vars)
+        except IOError, e:
+            msg = "invalid Python installation: unable to open %s" % makefile
+            if hasattr(e, "strerror"):
+                msg = msg + " (%s)" % e.strerror
+            raise IOError(msg)
+
+        # load the installed pyconfig.h:
+        config_h = get_config_h_filename()
+        try:
+            with open(config_h) as f:
+                parse_config_h(f, vars)
+        except IOError, e:
+            msg = "invalid Python installation: unable to open %s" % config_h
+            if hasattr(e, "strerror"):
+                msg = msg + " (%s)" % e.strerror
+            raise IOError(msg)
 
     # On AIX, there are wrong paths to the linker scripts in the Makefile
     # -- these paths are relative to the Python source, but when installed
--- /dev/null
+++ Python-2.7.2.new/Modules/_hashlib.c
@@ -0,0 +1 @@
+#include "_hashopenssl.c"
--- Python-2.7.2.orig/Modules/_localemodule.c
+++ Python-2.7.2.new/Modules/_localemodule.c
@@ -206,7 +206,7 @@ static PyObject*
 PyLocale_localeconv(PyObject* self)
 {
     PyObject* result;
-    struct lconv *l;
+    //struct lconv *l;
     PyObject *x;
 
     result = PyDict_New();
@@ -214,52 +214,52 @@ PyLocale_localeconv(PyObject* self)
         return NULL;
 
     /* if LC_NUMERIC is different in the C library, use saved value */
-    l = localeconv();
+    //l = localeconv();
 
     /* hopefully, the localeconv result survives the C library calls
        involved herein */
 
 #define RESULT_STRING(s)\
-    x = PyString_FromString(l->s);\
+    x = PyString_FromString(s);/*l->s);*/\
     if (!x) goto failed;\
     PyDict_SetItemString(result, #s, x);\
     Py_XDECREF(x)
 
 #define RESULT_INT(i)\
-    x = PyInt_FromLong(l->i);\
+    x = PyInt_FromLong(i);/*l->i);*/\
     if (!x) goto failed;\
     PyDict_SetItemString(result, #i, x);\
     Py_XDECREF(x)
 
     /* Numeric information */
-    RESULT_STRING(decimal_point);
-    RESULT_STRING(thousands_sep);
-    x = copy_grouping(l->grouping);
+    RESULT_STRING(".");//decimal_point);
+    RESULT_STRING("");//thousands_sep);
+    x = copy_grouping("");//l->grouping);
     if (!x)
         goto failed;
     PyDict_SetItemString(result, "grouping", x);
     Py_XDECREF(x);
 
     /* Monetary information */
-    RESULT_STRING(int_curr_symbol);
-    RESULT_STRING(currency_symbol);
-    RESULT_STRING(mon_decimal_point);
-    RESULT_STRING(mon_thousands_sep);
-    x = copy_grouping(l->mon_grouping);
+    RESULT_STRING("");//int_curr_symbol);
+    RESULT_STRING("");//currency_symbol);
+    RESULT_STRING("");//mon_decimal_point);
+    RESULT_STRING("");//mon_thousands_sep);
+    x = copy_grouping("");//l->mon_grouping);
     if (!x)
         goto failed;
     PyDict_SetItemString(result, "mon_grouping", x);
     Py_XDECREF(x);
-    RESULT_STRING(positive_sign);
-    RESULT_STRING(negative_sign);
-    RESULT_INT(int_frac_digits);
-    RESULT_INT(frac_digits);
-    RESULT_INT(p_cs_precedes);
-    RESULT_INT(p_sep_by_space);
-    RESULT_INT(n_cs_precedes);
-    RESULT_INT(n_sep_by_space);
-    RESULT_INT(p_sign_posn);
-    RESULT_INT(n_sign_posn);
+    RESULT_STRING("");//positive_sign);
+    RESULT_STRING("");//negative_sign);
+    RESULT_INT(CHAR_MAX);//int_frac_digits);
+    RESULT_INT(CHAR_MAX);//frac_digits);
+    RESULT_INT(CHAR_MAX);//p_cs_precedes);
+    RESULT_INT(CHAR_MAX);//p_sep_by_space);
+    RESULT_INT(CHAR_MAX);//n_cs_precedes);
+    RESULT_INT(CHAR_MAX);//n_sep_by_space);
+    RESULT_INT(CHAR_MAX);//p_sign_posn);
+    RESULT_INT(CHAR_MAX);//n_sign_posn);
     return result;
 
   failed:
--- Python-2.7.2.orig/Modules/_multiprocessing/multiprocessing.c
+++ Python-2.7.2.new/Modules/_multiprocessing/multiprocessing.c
@@ -122,7 +122,7 @@ multiprocessing_sendfd(PyObject *self, PyObject *args)
     cmsg->cmsg_type = SCM_RIGHTS;
     cmsg->cmsg_len = CMSG_LEN(sizeof(int));
     msg.msg_controllen = cmsg->cmsg_len;
-    *CMSG_DATA(cmsg) = fd;
+    memcpy((int*) CMSG_DATA(cmsg), &fd, sizeof(int));
 
     Py_BEGIN_ALLOW_THREADS
     res = sendmsg(conn, &msg, 0);
@@ -165,7 +165,8 @@ multiprocessing_recvfd(PyObject *self, PyObject *args)
     if (res < 0)
         return PyErr_SetFromErrno(PyExc_OSError);
 
-    fd = *CMSG_DATA(cmsg);
+    int* dataPointer = CMSG_DATA(cmsg);
+    fd = *dataPointer;
     return Py_BuildValue("i", fd);
 }
 
--- Python-2.7.2.orig/Modules/_tkinter.c
+++ Python-2.7.2.new/Modules/_tkinter.c
@@ -589,6 +589,8 @@ Tcl_AppInit(Tcl_Interp *interp)
 
     return TCL_OK;
 }
+#else
+#  include "tkappinit.c"
 #endif /* !WITH_APPINIT */
 
 
--- Python-2.7.2.orig/Modules/getpath.c
+++ Python-2.7.2.new/Modules/getpath.c
@@ -125,6 +125,8 @@
 #define LANDMARK "os.py"
 #endif
 
+#define TK_PATH "/lib-tk"
+
 static char prefix[MAXPATHLEN+1];
 static char exec_prefix[MAXPATHLEN+1];
 static char progpath[MAXPATHLEN+1];
@@ -572,6 +574,8 @@ calculate_path(void)
     }
 
     bufsz += strlen(zip_path) + 1;
+    bufsz += strlen(zip_path) + strlen(TK_PATH) + 1;
+    
     bufsz += strlen(exec_prefix) + 1;
 
     /* This is the only malloc call in this file */
@@ -621,6 +625,11 @@ calculate_path(void)
             defpath = delim + 1;
         }
         strcat(buf, delimiter);
+        
+        /* Next is the lib-tk path */
+        strcat(buf, zip_path);
+        strcat(buf, TK_PATH);
+        strcat(buf, delimiter);
 
         /* Finally, on goes the directory for dynamic-load modules */
         strcat(buf, exec_prefix);
--- Python-2.7.2.orig/Modules/ossaudiodev.c
+++ Python-2.7.2.new/Modules/ossaudiodev.c
@@ -30,7 +30,11 @@
 #endif
 
 #include <sys/ioctl.h>
-#include <sys/soundcard.h>
+#ifdef __ANDROID__
+# include <linux/soundcard.h>
+#else
+# include <sys/soundcard.h>
+#endif
 
 #if defined(linux)
 
--- Python-2.7.2.orig/Modules/posixmodule.c
+++ Python-2.7.2.new/Modules/posixmodule.c
@@ -3787,13 +3787,13 @@ posix_openpty(PyObject *self, PyObject *noargs)
     slave_fd = open(slave_name, O_RDWR | O_NOCTTY); /* open slave */
     if (slave_fd < 0)
         return posix_error();
-#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
-    ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
-    ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
-#ifndef __hpux
-    ioctl(slave_fd, I_PUSH, "ttcompat"); /* push ttcompat */
-#endif /* __hpux */
-#endif /* HAVE_CYGWIN */
+//#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
+//    ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
+//    ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
+//#ifndef __hpux
+//    ioctl(slave_fd, I_PUSH, "ttcompat"); /* push ttcompat */
+//#endif /* __hpux */
+//#endif /* HAVE_CYGWIN */
 #endif /* HAVE_OPENPTY */
 
     return Py_BuildValue("(ii)", master_fd, slave_fd);
--- Python-2.7.2.orig/Modules/pwdmodule.c
+++ Python-2.7.2.new/Modules/pwdmodule.c
@@ -75,7 +75,7 @@ mkpwent(struct passwd *p)
 #endif
     SETI(setIndex++, p->pw_uid);
     SETI(setIndex++, p->pw_gid);
-#ifdef __VMS
+#if 1//def __VMS
     SETS(setIndex++, "");
 #else
     SETS(setIndex++, p->pw_gecos);
--- Python-2.7.2.orig/Modules/termios.c
+++ Python-2.7.2.new/Modules/termios.c
@@ -227,6 +227,7 @@ termios_tcsendbreak(PyObject *self, PyObject *args)
     return Py_None;
 }
 
+#if 0
 PyDoc_STRVAR(termios_tcdrain__doc__,
 "tcdrain(fd) -> None\n\
 \n\
@@ -246,6 +247,7 @@ termios_tcdrain(PyObject *self, PyObject *args)
     Py_INCREF(Py_None);
     return Py_None;
 }
+#endif
 
 PyDoc_STRVAR(termios_tcflush__doc__,
 "tcflush(fd, queue) -> None\n\
@@ -301,8 +303,8 @@ static PyMethodDef termios_methods[] =
      METH_VARARGS, termios_tcsetattr__doc__},
     {"tcsendbreak", termios_tcsendbreak,
      METH_VARARGS, termios_tcsendbreak__doc__},
-    {"tcdrain", termios_tcdrain,
-     METH_VARARGS, termios_tcdrain__doc__},
+    //{"tcdrain", termios_tcdrain,
+     //METH_VARARGS, termios_tcdrain__doc__},
     {"tcflush", termios_tcflush,
      METH_VARARGS, termios_tcflush__doc__},
     {"tcflow", termios_tcflow,
--- Python-2.7.2.orig/Objects/stringlib/formatter.h
+++ Python-2.7.2.new/Objects/stringlib/formatter.h
@@ -639,13 +639,13 @@ static void
 get_locale_info(int type, LocaleInfo *locale_info)
 {
     switch (type) {
-    case LT_CURRENT_LOCALE: {
+    case LT_CURRENT_LOCALE: /*{
         struct lconv *locale_data = localeconv();
         locale_info->decimal_point = locale_data->decimal_point;
         locale_info->thousands_sep = locale_data->thousands_sep;
         locale_info->grouping = locale_data->grouping;
         break;
-    }
+    }*/
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = ".";
         locale_info->thousands_sep = ",";
--- Python-2.7.2.orig/Objects/stringlib/localeutil.h
+++ Python-2.7.2.new/Objects/stringlib/localeutil.h
@@ -202,9 +202,9 @@ _Py_InsertThousandsGroupingLocale(STRINGLIB_CHAR *buffer,
                                   Py_ssize_t n_digits,
                                   Py_ssize_t min_width)
 {
-        struct lconv *locale_data = localeconv();
-        const char *grouping = locale_data->grouping;
-        const char *thousands_sep = locale_data->thousands_sep;
+        //struct lconv *locale_data = localeconv();
+        const char *grouping = "\3\0";//locale_data->grouping;
+        const char *thousands_sep = ",";//locale_data->thousands_sep;
 
         return _Py_InsertThousandsGrouping(buffer, n_buffer, digits, n_digits,
                                            min_width, grouping, thousands_sep);
--- Python-2.7.2.orig/Parser/myreadline.c
+++ Python-2.7.2.new/Parser/myreadline.c
@@ -29,6 +29,10 @@ static PyThread_type_lock _PyOS_ReadlineLock = NULL;
 
 int (*PyOS_InputHook)(void) = NULL;
 
+int (*get_PyOS_InputHook())(void) {
+    return PyOS_InputHook;
+}
+
 #ifdef RISCOS
 int Py_RISCOSWimpFlag;
 #endif
@@ -164,6 +168,9 @@ PyOS_StdioReadline(FILE *sys_stdin, FILE *sys_stdout, char *prompt)
 
 char *(*PyOS_ReadlineFunctionPointer)(FILE *, FILE *, char *);
 
+void set_PyOS_ReadlineFunctionPointer(char *(*func)(FILE *, FILE *, char *)) {
+    PyOS_ReadlineFunctionPointer = func;
+}
 
 /* Interface used by tokenizer.c and bltinmodule.c */
 
--- Python-2.7.2.orig/Python/bltinmodule.c
+++ Python-2.7.2.new/Python/bltinmodule.c
@@ -19,7 +19,7 @@
 */
 #if defined(MS_WINDOWS) && defined(HAVE_USABLE_WCHAR_T)
 const char *Py_FileSystemDefaultEncoding = "mbcs";
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || 1
 const char *Py_FileSystemDefaultEncoding = "utf-8";
 #else
 const char *Py_FileSystemDefaultEncoding = NULL; /* use default */
--- Python-2.7.2.orig/Python/pystrtod.c
+++ Python-2.7.2.new/Python/pystrtod.c
@@ -126,7 +126,7 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 {
     char *fail_pos;
     double val = -1.0;
-    struct lconv *locale_data;
+    //struct lconv *locale_data;
     const char *decimal_point;
     size_t decimal_point_len;
     const char *p, *decimal_point_pos;
@@ -138,8 +138,8 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 
     fail_pos = NULL;
 
-    locale_data = localeconv();
-    decimal_point = locale_data->decimal_point;
+    //locale_data = localeconv();
+    decimal_point = "."; //locale_data->decimal_point;
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -375,8 +375,8 @@ PyOS_string_to_double(const char *s,
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    //struct lconv *locale_data = localeconv();
+    const char *decimal_point = ".";//locale_data->decimal_point;
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
--- Python-2.7.2.orig/Python/strtod.c
+++ Python-2.7.2.new/Python/strtod.c
@@ -60,7 +60,7 @@ extern  double  atof(const char *);             /* Only called when result known
 #ifdef HAVE_ERRNO_H
 #include <errno.h>
 #endif
-extern  int     errno;
+//extern  int     errno;
 
 double strtod(char *str, char **ptr)
 {
