--- Python-3.4.3.orig/Lib/_sitebuiltins.py
+++ Python-3.4.3.new/Lib/_sitebuiltins.py
@@ -51,7 +51,15 @@ class _Printer(object):
                     data = fp.read()
                 break
             except OSError:
-                pass
+                try:
+                    import zipfile
+                    zipPath, subPath = filename.split(".zip")
+                    with zipfile.ZipFile(zipPath + ".zip", "r") as z:
+                        with z.open(subPath.replace("\\", "/")[1:], "r") as fp:
+                            data = fp.read().decode("utf-8")
+                            break
+                except Exception:
+                    pass
         if not data:
             data = self.__data
         self.__lines = data.split('\n')
--- Python-3.4.3.orig/Lib/distutils/sysconfig.py
+++ Python-3.4.3.new/Lib/distutils/sysconfig.py
@@ -165,7 +165,7 @@ def customize_compiler(compiler):
     Mainly needed on Unix, so we can plug in the information that
     varies across Unices and is stored in Python's Makefile.
     """
-    if compiler.compiler_type == "unix":
+    if compiler.compiler_type == "unix" and sys.platform != "android":
         if sys.platform == "darwin":
             # Perform first-time customization of compiler-related
             # config vars on OS X now that we know we need a compiler.
@@ -425,6 +425,18 @@ _config_vars = None
 def _init_posix():
     """Initialize the module as appropriate for POSIX systems."""
     g = {}
+    global _config_vars
+    if sys.platform == 'android':
+        g['LIBDEST'] = get_python_lib(plat_specific=0, standard_lib=1)
+        g['BINLIBDEST'] = get_python_lib(plat_specific=1, standard_lib=1)
+
+        #g['INCLUDEPY'] = get_python_inc(plat_specific=0)
+
+        g['SO'] = '.so'
+        g['VERSION'] = get_python_version().replace(".", "")
+        #g['BINDIR'] = os.path.dirname(os.path.abspath(sys.executable))
+        _config_vars = g
+        return
     # load the installed Makefile:
     try:
         filename = get_makefile_filename()
@@ -454,7 +466,7 @@ def _init_posix():
     if python_build:
         g['LDSHARED'] = g['BLDSHARED']
 
-    global _config_vars
+    #global _config_vars
     _config_vars = g
 
 
--- Python-3.4.3.orig/Lib/idlelib/PyShell.py
+++ Python-3.4.3.new/Lib/idlelib/PyShell.py
@@ -445,7 +445,7 @@ class ModifiedInterpreter(InteractiveInterpreter):
         self.spawn_subprocess()
         #time.sleep(20) # test to simulate GUI not accepting connection
         # Accept the connection from the Python execution server
-        self.rpcclt.listening_sock.settimeout(10)
+        self.rpcclt.listening_sock.settimeout(10 * 5000)
         try:
             self.rpcclt.accept()
         except socket.timeout as err:
@@ -1535,7 +1535,7 @@ def main():
     root = Tk(className="Idle")
 
     # set application icon
-    icondir = os.path.join(os.path.dirname(__file__), 'Icons')
+    icondir = idleConf.GetIconsDir()
     if system() == 'Windows':
         iconfile = os.path.join(icondir, 'idle.ico')
         root.wm_iconbitmap(default=iconfile)
--- Python-3.4.3.orig/Lib/idlelib/TreeWidget.py
+++ Python-3.4.3.new/Lib/idlelib/TreeWidget.py
@@ -20,16 +20,10 @@ from tkinter import *
 from idlelib import ZoomHeight
 from idlelib.configHandler import idleConf
 
-ICONDIR = "Icons"
+ICONDIR = idleConf.GetIconsDir()
 
-# Look for Icons subdirectory in the same directory as this module
-try:
-    _icondir = os.path.join(os.path.dirname(__file__), ICONDIR)
-except NameError:
-    _icondir = ICONDIR
-if os.path.isdir(_icondir):
-    ICONDIR = _icondir
-elif not os.path.isdir(ICONDIR):
+# Verify the icon dir
+if not os.path.isdir(ICONDIR):
     raise RuntimeError("can't find icon directory (%r)" % (ICONDIR,))
 
 def listicons(icondir=ICONDIR):
--- Python-3.4.3.orig/Lib/idlelib/configHandler.py
+++ Python-3.4.3.new/Lib/idlelib/configHandler.py
@@ -22,6 +22,8 @@ import os
 import sys
 
 from configparser import ConfigParser
+from tempfile import mkdtemp
+from shutil import rmtree, copytree
 
 class InvalidConfigType(Exception): pass
 class InvalidConfigSet(Exception): pass
@@ -65,7 +67,18 @@ class IdleConfParser(ConfigParser):
 
     def Load(self):
         "Load the configuration file from disk."
-        self.read(self.file)
+        if '.zip' in self.file:
+            try:
+                import zipfile
+                import io
+                zipPath, subPath = self.file.split('.zip')
+                with zipfile.ZipFile(zipPath + '.zip') as z:
+                    with io.TextIOWrapper(z.open(subPath.replace('\\', '/')[1:])) as fp:
+                        self.read_file(fp, source = self.file)
+            except Exception:
+                pass
+        else:
+            self.read(self.file)
 
 class IdleUserConfParser(IdleConfParser):
     """
@@ -154,6 +167,7 @@ class IdleConf:
         self.defaultCfg = {}
         self.userCfg = {}
         self.cfg = {}  # TODO use to select userCfg vs defaultCfg
+        self.iconDir = None
         self.CreateConfigHandlers()
         self.LoadCfgFiles()
 
@@ -187,9 +201,14 @@ class IdleConf:
         cfgDir = '.idlerc'
         userDir = os.path.expanduser('~')
         if userDir != '~': # expanduser() found user home dir
+            warn = None
             if not os.path.exists(userDir):
                 warn = ('\n Warning: os.path.expanduser("~") points to\n ' +
                         userDir + ',\n but the path does not exist.')
+            elif not os.access(userDir, os.W_OK | os.R_OK):
+                warn = ('\n Warning: os.path.expanduser("~") points to\n ' +
+                                        userDir + ',\n but the path is not writable.')
+            if warn:
                 try:
                     print(warn, file=sys.stderr)
                 except OSError:
@@ -681,6 +700,29 @@ class IdleConf:
         for key in self.userCfg:
             self.userCfg[key].Save()
 
+    def GetIconsDir(self):
+        "Get the path to the directory, where all icons our icons are."
+        if self.iconDir == None:
+            self.iconDir = os.path.join(os.path.dirname(__file__), 'Icons')
+            if '.zip' in self.iconDir:
+                # tk does not support loading from a zip
+                cachePath = os.environ.get('XDG_CACHE_HOME')
+                iconDir = os.path.join(cachePath, 'idleIcons')
+                if not os.path.exists(iconDir):
+                    tempPath = mkdtemp(suffix = '-idleIcons')
+                    try:
+                        import zipfile
+                        zipPath, subPath = self.iconDir.split('.zip')
+                        subPath = subPath
+                        with zipfile.ZipFile(zipPath + '.zip', 'r') as pyZip:
+                            pyZip.extractall(path = tempPath, members = [img.filename for img in pyZip.filelist if subPath[1:] in img.filename])
+                        copytree(tempPath + subPath, iconDir)
+                    except Exception:
+                        pass
+                    rmtree(tempPath, ignore_errors = True)
+                self.iconDir = iconDir
+        return self.iconDir
+
 
 idleConf = IdleConf()
 
--- Python-3.4.3.orig/Lib/idlelib/textView.py
+++ Python-3.4.3.new/Lib/idlelib/textView.py
@@ -70,8 +70,18 @@ def view_text(parent, title, text, modal=True):
 
 def view_file(parent, title, filename, encoding=None, modal=True):
     try:
-        with open(filename, 'r', encoding=encoding) as file:
-            contents = file.read()
+        if '.zip' in filename:
+            import zipfile
+            zipPath, subPath = filename.split('.zip')
+            try:
+                with zipfile.ZipFile(zipPath + '.zip', 'r') as z:
+                    with z.open(subPath.replace('\\', '/')[1:], 'r') as fp:
+                        contents = fp.read().decode(encoding if encoding != None else 'utf-8')
+            except BadZipfile:
+                raise IOError()
+        else:
+            with open(filename, 'r', encoding=encoding) as file:
+                contents = file.read()
     except IOError:
         tkMessageBox.showerror(title='File Load Error',
                                message='Unable to load file %r .' % filename,
--- Python-3.4.3.orig/Lib/subprocess.py
+++ Python-3.4.3.new/Lib/subprocess.py
@@ -1345,7 +1345,8 @@ class Popen(object):
                 args = list(args)
 
             if shell:
-                args = ["/bin/sh", "-c"] + args
+                shellPath = "/system/bin/sh" if sys.platform == "android" else "/bin/sh"
+                args = [shellPath, "-c"] + args
                 if executable:
                     args[0] = executable
 
--- Python-3.4.3.orig/Lib/sysconfig.py
+++ Python-3.4.3.new/Lib/sysconfig.py
@@ -345,25 +345,35 @@ def _generate_posix_vars():
     """Generate the Python module containing build-time variables."""
     import pprint
     vars = {}
-    # load the installed Makefile:
-    makefile = get_makefile_filename()
-    try:
-        _parse_makefile(makefile, vars)
-    except OSError as e:
-        msg = "invalid Python installation: unable to open %s" % makefile
-        if hasattr(e, "strerror"):
-            msg = msg + " (%s)" % e.strerror
-        raise OSError(msg)
-    # load the installed pyconfig.h:
-    config_h = get_config_h_filename()
-    try:
-        with open(config_h) as f:
-            parse_config_h(f, vars)
-    except OSError as e:
-        msg = "invalid Python installation: unable to open %s" % config_h
-        if hasattr(e, "strerror"):
-            msg = msg + " (%s)" % e.strerror
-        raise OSError(msg)
+    if sys.platform == 'android':
+        vars['LIBDEST'] = get_path('stdlib')
+        vars['BINLIBDEST'] = get_path('platstdlib')
+
+        #vars['INCLUDEPY'] = get_python_inc(plat_specific=0)
+
+        vars['SO'] = '.so'
+        vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT
+        vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))
+    else:
+        # load the installed Makefile:
+        makefile = get_makefile_filename()
+        try:
+            _parse_makefile(makefile, vars)
+        except OSError as e:
+            msg = "invalid Python installation: unable to open %s" % makefile
+            if hasattr(e, "strerror"):
+                msg = msg + " (%s)" % e.strerror
+            raise OSError(msg)
+        # load the installed pyconfig.h:
+        config_h = get_config_h_filename()
+        try:
+            with open(config_h) as f:
+                parse_config_h(f, vars)
+        except OSError as e:
+            msg = "invalid Python installation: unable to open %s" % config_h
+            if hasattr(e, "strerror"):
+                msg = msg + " (%s)" % e.strerror
+            raise OSError(msg)
     # On AIX, there are wrong paths to the linker scripts in the Makefile
     # -- these paths are relative to the Python source, but when installed
     # the scripts are in another directory.
@@ -407,8 +417,18 @@ def _generate_posix_vars():
 def _init_posix(vars):
     """Initialize the module as appropriate for POSIX systems."""
     # _sysconfigdata is generated at build time, see _generate_posix_vars()
-    from _sysconfigdata import build_time_vars
-    vars.update(build_time_vars)
+    if sys.platform == 'android':
+        vars['LIBDEST'] = get_path('stdlib')
+        vars['BINLIBDEST'] = get_path('platstdlib')
+
+        #vars['INCLUDEPY'] = get_python_inc(plat_specific=0)
+
+        vars['SO'] = '.so'
+        vars['VERSION'] = _PY_VERSION_SHORT_NO_DOT
+        vars['BINDIR'] = os.path.dirname(_safe_realpath(sys.executable))
+    else:
+        from _sysconfigdata import build_time_vars
+        vars.update(build_time_vars)
 
 def _init_non_posix(vars):
     """Initialize the module as appropriate for NT"""
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/basearith.c
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/basearith.c
@@ -32,7 +32,7 @@
 #include <string.h>
 #include <assert.h>
 #include "constants.h"
-#include "memory.h"
+#include "mpmemory.h"
 #include "typearith.h"
 #include "basearith.h"
 
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/io.c
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/io.c
@@ -37,7 +37,7 @@
 #include <locale.h>
 #include "bits.h"
 #include "constants.h"
-#include "memory.h"
+#include "mpmemory.h"
 #include "typearith.h"
 #include "io.h"
 
@@ -861,17 +861,17 @@ mpd_parse_fmt_str(mpd_spec_t *spec, const char *fmt, int caps)
     }
     else if (*cp == 'N' || *cp == 'n') {
         /* locale specific conversion */
-        struct lconv *lc;
+        //struct lconv *lc;
         /* separator has already been specified */
         if (*spec->sep) {
             return 0;
         }
         spec->type = *cp++;
         spec->type = (spec->type == 'N') ? 'G' : 'g';
-        lc = localeconv();
-        spec->dot = lc->decimal_point;
-        spec->sep = lc->thousands_sep;
-        spec->grouping = lc->grouping;
+        //lc = localeconv();
+        spec->dot = ".";//lc->decimal_point;
+        spec->sep = "";//lc->thousands_sep;
+        spec->grouping = "";//lc->grouping;
         if (mpd_validate_lconv(spec) < 0) {
             return 0; /* GCOV_NOT_REACHED */
         }
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/memory.c
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/memory.c
@@ -30,7 +30,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include "typearith.h"
-#include "memory.h"
+#include "mpmemory.h"
 
 
 /* Guaranteed minimum allocation for a coefficient. May be changed once
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/memory.h
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (c) 2008-2016 Stefan Krah. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in the
- *    documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
- * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
- * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- */
-
-
-#ifndef MEMORY_H
-#define MEMORY_H
-
-
-#include "mpdecimal.h"
-
-
-/* Internal header file: all symbols have local scope in the DSO */
-MPD_PRAGMA(MPD_HIDE_SYMBOLS_START)
-
-
-int mpd_switch_to_dyn(mpd_t *result, mpd_ssize_t size, uint32_t *status);
-int mpd_switch_to_dyn_zero(mpd_t *result, mpd_ssize_t size, uint32_t *status);
-int mpd_realloc_dyn(mpd_t *result, mpd_ssize_t size, uint32_t *status);
-
-
-MPD_PRAGMA(MPD_HIDE_SYMBOLS_END) /* restore previous scope rules */
-
-
-#endif
-
-
-
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/mpdecimal.c
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/mpdecimal.c
@@ -36,7 +36,7 @@
 #include "bits.h"
 #include "convolute.h"
 #include "crt.h"
-#include "memory.h"
+#include "mpmemory.h"
 #include "typearith.h"
 #include "umodarith.h"
 
--- Python-3.4.3.orig/Modules/_decimal/libmpdec/mpdecimal.h
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/mpdecimal.h
@@ -372,6 +372,7 @@ void mpd_addstatus_raise(mpd_context_t *ctx, uint32_t flags);
 #define MPD_CONST_DATA          ((uint8_t)128)
 #define MPD_DATAFLAGS (MPD_STATIC_DATA|MPD_SHARED_DATA|MPD_CONST_DATA)
 
+
 /* mpd_t */
 typedef struct mpd_t {
     uint8_t flags;
--- /dev/null
+++ Python-3.4.3.new/Modules/_decimal/libmpdec/mpmemory.h
@@ -0,0 +1,51 @@
+/*
+ * Copyright (c) 2008-2016 Stefan Krah. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+ * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+ * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+ * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+
+#ifndef MP_MEMORY_H
+#define MP_MEMORY_H
+
+
+#include "mpdecimal.h"
+
+
+/* Internal header file: all symbols have local scope in the DSO */
+MPD_PRAGMA(MPD_HIDE_SYMBOLS_START)
+
+
+int mpd_switch_to_dyn(mpd_t *result, mpd_ssize_t size, uint32_t *status);
+int mpd_switch_to_dyn_zero(mpd_t *result, mpd_ssize_t size, uint32_t *status);
+int mpd_realloc_dyn(mpd_t *result, mpd_ssize_t size, uint32_t *status);
+
+
+MPD_PRAGMA(MPD_HIDE_SYMBOLS_END) /* restore previous scope rules */
+
+
+#endif
+
+
+
--- /dev/null
+++ Python-3.4.3.new/Modules/_hashlib.c
@@ -0,0 +1 @@
+#include "_hashopenssl.c"
--- Python-3.4.3.orig/Modules/_localemodule.c
+++ Python-3.4.3.new/Modules/_localemodule.c
@@ -134,7 +134,7 @@ static PyObject*
 PyLocale_localeconv(PyObject* self)
 {
     PyObject* result;
-    struct lconv *l;
+    //struct lconv *l;
     PyObject *x;
 
     result = PyDict_New();
@@ -142,7 +142,7 @@ PyLocale_localeconv(PyObject* self)
         return NULL;
 
     /* if LC_NUMERIC is different in the C library, use saved value */
-    l = localeconv();
+    //l = localeconv();
 
     /* hopefully, the localeconv result survives the C library calls
        involved herein */
@@ -160,40 +160,40 @@ PyLocale_localeconv(PyObject* self)
 
 #define RESULT_STRING(s)\
     do { \
-        x = PyUnicode_DecodeLocale(l->s, NULL); \
+        x = PyUnicode_DecodeLocale(s, NULL);/*l->s, NULL);*/ \
         RESULT(#s, x); \
     } while (0)
 
 #define RESULT_INT(i)\
     do { \
-        x = PyLong_FromLong(l->i); \
+        x = PyLong_FromLong(i);/*l->i);*/ \
         RESULT(#i, x); \
     } while (0)
 
     /* Numeric information */
-    RESULT_STRING(decimal_point);
-    RESULT_STRING(thousands_sep);
-    x = copy_grouping(l->grouping);
+    RESULT_STRING(".");//decimal_point);
+    RESULT_STRING("");//thousands_sep);
+    x = copy_grouping("");//l->grouping);
     RESULT("grouping", x);
 
     /* Monetary information */
-    RESULT_STRING(int_curr_symbol);
-    RESULT_STRING(currency_symbol);
-    RESULT_STRING(mon_decimal_point);
-    RESULT_STRING(mon_thousands_sep);
-    x = copy_grouping(l->mon_grouping);
+    RESULT_STRING("");//int_curr_symbol);
+    RESULT_STRING("");//currency_symbol);
+    RESULT_STRING("");//mon_decimal_point);
+    RESULT_STRING("");//mon_thousands_sep);
+    x = copy_grouping("");//l->mon_grouping);
     RESULT("mon_grouping", x);
 
-    RESULT_STRING(positive_sign);
-    RESULT_STRING(negative_sign);
-    RESULT_INT(int_frac_digits);
-    RESULT_INT(frac_digits);
-    RESULT_INT(p_cs_precedes);
-    RESULT_INT(p_sep_by_space);
-    RESULT_INT(n_cs_precedes);
-    RESULT_INT(n_sep_by_space);
-    RESULT_INT(p_sign_posn);
-    RESULT_INT(n_sign_posn);
+    RESULT_STRING("");//positive_sign);
+    RESULT_STRING("");//negative_sign);
+    RESULT_INT(CHAR_MAX);//int_frac_digits);
+    RESULT_INT(CHAR_MAX);//frac_digits);
+    RESULT_INT(CHAR_MAX);//p_cs_precedes);
+    RESULT_INT(CHAR_MAX);//p_sep_by_space);
+    RESULT_INT(CHAR_MAX);//n_cs_precedes);
+    RESULT_INT(CHAR_MAX);//n_sep_by_space);
+    RESULT_INT(CHAR_MAX);//p_sign_posn);
+    RESULT_INT(CHAR_MAX);//n_sign_posn);
     return result;
 
   failed:
--- Python-3.4.3.orig/Modules/_posixsubprocess.c
+++ Python-3.4.3.new/Modules/_posixsubprocess.c
@@ -20,7 +20,11 @@
 
 #if defined(__ANDROID__) && !defined(SYS_getdents64)
 /* Android doesn't expose syscalls, add the definition manually. */
-# include <sys/linux-syscalls.h>
+# ifdef ABI_64_BIT
+#  include <sys/glibc-syscalls.h>
+# else
+#  include <sys/linux-syscalls.h>
+# endif /*ABI_64_BIT*/
 # define SYS_getdents64  __NR_getdents64
 #endif
 
--- Python-3.4.3.orig/Modules/_tkinter.c
+++ Python-3.4.3.new/Modules/_tkinter.c
@@ -530,6 +530,8 @@ Tcl_AppInit(Tcl_Interp *interp)

     return TCL_OK;
 }
+#else
+#  include "tkappinit.c"
 #endif /* !WITH_APPINIT */


--- Python-3.4.3.orig/Modules/ossaudiodev.c
+++ Python-3.4.3.new/Modules/ossaudiodev.c
@@ -30,7 +30,11 @@
 #endif
 
 #include <sys/ioctl.h>
-#include <sys/soundcard.h>
+#ifdef __ANDROID__
+# include <linux/soundcard.h>
+#else
+# include <sys/soundcard.h>
+#endif
 
 #if defined(linux)
 
--- Python-3.4.3.orig/Modules/posixmodule.c
+++ Python-3.4.3.new/Modules/posixmodule.c
@@ -6068,13 +6068,13 @@ posix_openpty(PyObject *self, PyObject *noargs)
     if (_Py_set_inheritable(master_fd, 0, NULL) < 0)
         goto posix_error;
 
-#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
-    ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
-    ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
-#ifndef __hpux
-    ioctl(slave_fd, I_PUSH, "ttcompat"); /* push ttcompat */
-#endif /* __hpux */
-#endif /* HAVE_CYGWIN */
+//#if !defined(__CYGWIN__) && !defined(HAVE_DEV_PTC)
+//    ioctl(slave_fd, I_PUSH, "ptem"); /* push ptem */
+//    ioctl(slave_fd, I_PUSH, "ldterm"); /* push ldterm */
+//#ifndef __hpux
+//    ioctl(slave_fd, I_PUSH, "ttcompat"); /* push ttcompat */
+//#endif /* __hpux */
+//#endif /* HAVE_CYGWIN */
 #endif /* HAVE_OPENPTY */
 
     return Py_BuildValue("(ii)", master_fd, slave_fd);
--- Python-3.4.3.orig/Modules/pwdmodule.c
+++ Python-3.4.3.new/Modules/pwdmodule.c
@@ -72,7 +72,7 @@ mkpwent(struct passwd *p)
     SETS(setIndex++, p->pw_passwd);
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromUid(p->pw_uid));
     PyStructSequence_SET_ITEM(v, setIndex++, _PyLong_FromGid(p->pw_gid));
-    SETS(setIndex++, p->pw_gecos);
+    SETS(setIndex++, "");//p->pw_gecos);
     SETS(setIndex++, p->pw_dir);
     SETS(setIndex++, p->pw_shell);
 
--- Python-3.4.3.orig/Modules/python.c
+++ Python-3.4.3.new/Modules/python.c
@@ -16,7 +16,7 @@ wmain(int argc, wchar_t **argv)
 #else
 
 int
-main(int argc, char **argv)
+oldPy_Main(int argc, char **argv)
 {
     wchar_t **argv_copy;
     /* We need a second copy, as Python might modify the first one. */
--- Python-3.4.3.orig/Modules/socketmodule.c
+++ Python-3.4.3.new/Modules/socketmodule.c
@@ -260,6 +260,8 @@ if_indextoname(index) -- return the corresponding interface name\n\
 #include <net/if.h>
 #endif
 
+#include <linux/if.h>
+
 /* Generic socket object definitions and includes */
 #define PySocket_BUILDING_SOCKET
 #include "socketmodule.h"
--- Python-3.4.3.orig/Modules/termios.c
+++ Python-3.4.3.new/Modules/termios.c
@@ -220,6 +220,7 @@ termios_tcsendbreak(PyObject *self, PyObject *args)
     return Py_None;
 }
 
+#if 0
 PyDoc_STRVAR(termios_tcdrain__doc__,
 "tcdrain(fd) -> None\n\
 \n\
@@ -239,6 +240,7 @@ termios_tcdrain(PyObject *self, PyObject *args)
     Py_INCREF(Py_None);
     return Py_None;
 }
+#endif
 
 PyDoc_STRVAR(termios_tcflush__doc__,
 "tcflush(fd, queue) -> None\n\
@@ -294,8 +296,8 @@ static PyMethodDef termios_methods[] =
      METH_VARARGS, termios_tcsetattr__doc__},
     {"tcsendbreak", termios_tcsendbreak,
      METH_VARARGS, termios_tcsendbreak__doc__},
-    {"tcdrain", termios_tcdrain,
-     METH_VARARGS, termios_tcdrain__doc__},
+//    {"tcdrain", termios_tcdrain,
+//     METH_VARARGS, termios_tcdrain__doc__},
     {"tcflush", termios_tcflush,
      METH_VARARGS, termios_tcflush__doc__},
     {"tcflow", termios_tcflow,
--- Python-3.4.3.orig/Parser/myreadline.c
+++ Python-3.4.3.new/Parser/myreadline.c
@@ -25,6 +25,10 @@ static PyThread_type_lock _PyOS_ReadlineLock = NULL;
 
 int (*PyOS_InputHook)(void) = NULL;
 
+int (*get_PyOS_InputHook())(void) {
+    return PyOS_InputHook;
+}
+
 /* This function restarts a fgets() after an EINTR error occurred
    except if PyOS_InterruptOccurred() returns true. */
 
@@ -168,6 +172,9 @@ PyOS_StdioReadline(FILE *sys_stdin, FILE *sys_stdout, const char *prompt)
 
 char *(*PyOS_ReadlineFunctionPointer)(FILE *, FILE *, const char *);
 
+void set_PyOS_ReadlineFunctionPointer(char *(*func)(FILE *, FILE *, const char *)) {
+    PyOS_ReadlineFunctionPointer = func;
+}
 
 /* Interface used by tokenizer.c and bltinmodule.c */
 
--- Python-3.4.3.orig/Python/bltinmodule.c
+++ Python-3.4.3.new/Python/bltinmodule.c
@@ -24,7 +24,7 @@
 #ifdef HAVE_MBCS
 const char *Py_FileSystemDefaultEncoding = "mbcs";
 int Py_HasFileSystemDefaultEncoding = 1;
-#elif defined(__APPLE__)
+#elif defined(__APPLE__) || 1
 const char *Py_FileSystemDefaultEncoding = "utf-8";
 int Py_HasFileSystemDefaultEncoding = 1;
 #else
--- Python-3.4.3.orig/Python/formatter_unicode.c
+++ Python-3.4.3.new/Python/formatter_unicode.c
@@ -666,7 +666,7 @@ static int
 get_locale_info(int type, LocaleInfo *locale_info)
 {
     switch (type) {
-    case LT_CURRENT_LOCALE: {
+    case LT_CURRENT_LOCALE: /*{
         struct lconv *locale_data = localeconv();
         locale_info->decimal_point = PyUnicode_DecodeLocale(
                                          locale_data->decimal_point,
@@ -681,8 +681,7 @@ get_locale_info(int type, LocaleInfo *locale_info)
             return -1;
         }
         locale_info->grouping = locale_data->grouping;
-        break;
-    }
+        break;*/
     case LT_DEFAULT_LOCALE:
         locale_info->decimal_point = PyUnicode_FromOrdinal('.');
         locale_info->thousands_sep = PyUnicode_FromOrdinal(',');
--- Python-3.4.3.orig/Python/getversion.c
+++ Python-3.4.3.new/Python/getversion.c
@@ -13,3 +13,7 @@ Py_GetVersion(void)
 		      PY_VERSION, Py_GetBuildInfo(), Py_GetCompiler());
 	return version;
 }
+
+const char* Py_getVersionString(void) {
+	return PY_VERSION;
+}
--- Python-3.4.3.orig/Python/pystrtod.c
+++ Python-3.4.3.new/Python/pystrtod.c
@@ -165,7 +165,7 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 {
     char *fail_pos;
     double val;
-    struct lconv *locale_data;
+    //struct lconv *locale_data;
     const char *decimal_point;
     size_t decimal_point_len;
     const char *p, *decimal_point_pos;
@@ -177,8 +177,8 @@ _PyOS_ascii_strtod(const char *nptr, char **endptr)
 
     fail_pos = NULL;
 
-    locale_data = localeconv();
-    decimal_point = locale_data->decimal_point;
+    //locale_data = localeconv();
+    decimal_point = ".";//locale_data->decimal_point;
     decimal_point_len = strlen(decimal_point);
 
     assert(decimal_point_len != 0);
@@ -378,8 +378,8 @@ PyOS_string_to_double(const char *s,
 Py_LOCAL_INLINE(void)
 change_decimal_from_locale_to_dot(char* buffer)
 {
-    struct lconv *locale_data = localeconv();
-    const char *decimal_point = locale_data->decimal_point;
+    //struct lconv *locale_data = localeconv();
+    const char *decimal_point = ".";//locale_data->decimal_point;
 
     if (decimal_point[0] != '.' || decimal_point[1] != 0) {
         size_t decimal_point_len = strlen(decimal_point);
